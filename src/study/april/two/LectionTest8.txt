10.04.2014
Тут что-то про дженерики.
Полиморфизм -- это один код для разных типов.
Полиморфизм бывает ad-hoc или универсальный -- когда для всех типов поведение одно и то же.
<?> - wildcard
<? extends Foo> - bounded wildcard
<? super Goo> - upper bounded wildcard

Веселье закончилось, началась теория:
Ковариантность:
S :> T => G<S> :> G<T>
Контрариантность:
S :> T => G<S> <: G<T>
инвариантность -- не связано

interface Functor<R, A> {
    R apply(A argument);
}

Functor<R1, A1> f1;
Functor<R2, A2> f2 = f1;

Ограничения такие:
R2 :> R1
A2 <: A1

А как это должно работать? А никак, у нас инвариантность. А нужно делать вот так:
<R, A> Functor<R, A> as(
    final Functor<? extends R, ? super A> f
    ) {}


